#include <iostream>
#include <fstream>
#include <cmath>
#include <cstring>
#include <opencv\cv.h>
#include <opencv\highgui.h>
#include "head.h"

using namespace std;
using namespace cv;

#define PI 3.14159265

Fingerprint::Fingerprint(){
	//strcpy(meno, "fingerprint.bmp");
	cout << "       *******************************************************************\n";
	cout << "       *******************************************************************\n";
	cout << "                    EXTRAKCIA MARKANTOV V ODTLACKOCH PRSTOV\n";
	cout << "       *******************************************************************\n";
	cout << "       *******************************************************************\n";
	cout << "\n\n";
	cout << "Zadajte meno obrazka: ";
	cin >> meno;
	image = imread(meno);

	block = 30;
	W = 0;
	pocet_bodov = image.rows * image.cols;

	cvtColor(image, image, CV_RGB2GRAY);
	image.copyTo(mask);

	end = Mat::zeros(image.rows, image.cols, image.type());
	bifurcation = Mat::zeros(image.rows, image.cols, image.type());
	crossbar = Mat::zeros(image.rows, image.cols, image.type());
	isolatedPoint = Mat::zeros(image.rows, image.cols, image.type());
	trifurcation = Mat::zeros(image.rows, image.cols, image.type());

}

void Fingerprint::ResultFingerprint(){
	cvtColor(image, image, CV_GRAY2BGR);
	for (int row = 0; row < image.rows; row++){
		for (int col = 0; col < image.cols; col++){
			Point point(col, row);
			if (end.at<uchar>(row, col) == 1){
				circle(image, point, 8, Scalar(0, 0, 255), 1, 20);
			}

			else if (bifurcation.at<uchar>(row, col) == 1){
				circle(image, point, 8, Scalar(0, 255, 0), 1, 20);
			}

			else if (isolatedPoint.at<uchar>(row, col) == 1){
				circle(image, point, 8, Scalar(255, 0, 0), 1, 20);
			}

			else if (crossbar.at<uchar>(row, col) == 1){
				circle(image, point, 20, Scalar(255, 0, 255), 1, 20);
			}

			else if (trifurcation.at<uchar>(row, col) == 1){
				circle(image, point, 20, Scalar(255, 255, 0), 1, 20);
			}
		}
	}

	imshow("image", image);

	imwrite("image.bmp", image);
	waitKey(0);
}

int Fingerprint::fillingCols(){
	int CW;

	if (W_stlpec + W > image.cols)
		return CW = image.cols % W;
	else
		return CW = W;
}

int Fingerprint::filingRaws(){
	int RW;

	if (W_riadok + W > image.rows)
		return RW = image.rows % W;
	else
		return RW = W;
}




void Fingerprint::Segmentation(){

	W = (image.cols / 1024.00) * 20;
	RW = CW = W;
	int I, V, M;
	I = V = M = 0;
	for (int riadok = 0; riadok < mask.rows; riadok += W){
		for (int stlpec = 0; stlpec < mask.cols; stlpec += W){
			M = 0;
			for (W_riadok = riadok; W_riadok < riadok + RW; W_riadok++){
				for (W_stlpec = stlpec; W_stlpec < stlpec + CW; W_stlpec++){
					M += image.at<uchar>(W_riadok, W_stlpec);
				}
			}

			M /= (RW * CW);

			for (W_riadok = riadok; W_riadok < riadok + RW; W_riadok++){
				for (W_stlpec = stlpec; W_stlpec < stlpec + CW; W_stlpec++){
					I = image.at<uchar>(W_riadok, W_stlpec);
					V += (I - M) * (I - M);
				}
			}

			V = V / (RW * CW);
			for (W_riadok = riadok; W_riadok < riadok + RW; W_riadok++){
				for (W_stlpec = stlpec; W_stlpec < stlpec + CW; W_stlpec++){
					V < M ? mask.at<uchar>(W_riadok, W_stlpec) = 0 : mask.at<uchar>(W_riadok, W_stlpec) = 255;
				}
			}
			CW = fillingCols();
		}
		CW = W;
		RW = filingRaws();
	}

	imwrite("maska.bmp", mask);
	mask.copyTo(maskWiener);

	for (int i = 0; i < 30; i++){
		for (int j = 0; j < mask.cols; j++){
			maskWiener.at<uchar>(i, j) = 0;
		}
	}

	for (int i = mask.rows - 30; i < mask.rows; i++){
		for (int j = 0; j < mask.cols; j++){
			maskWiener.at<uchar>(i, j) = 0;
		}
	}
	for (int i = 0; i < mask.rows; i++){
		for (int j = 0; j < mask.cols; j++){
			if (maskWiener.at<uchar>(i, j) == 0){
				maskWiener.at<uchar>(i, j) = 255;
				continue;
			}
			if (maskWiener.at<uchar>(i, j) == 255)
				maskWiener.at<uchar>(i, j) = 0;
		}
	}


	WienerFilter2(50, 50);
	WienerFilter2(100, 100);
	WienerFilter2(200, 200);
	for (int i = 0; i < maskWiener.rows; i++){
		for (int j = 0; j < maskWiener.cols; j++){
			if (maskWiener.at<uchar>(i, j) > 50){
				maskWiener.at<uchar>(i, j) = 0;
				continue;
			}
			if (maskWiener.at<uchar>(i, j) <= 50)
				maskWiener.at<uchar>(i, j) = 255;
		}
	}

	cout << "Segmentacia dokoncena\n";
	imwrite("maska + Wiener.bmp", maskWiener);
}


void Fingerprint::connection(){
	int RW, CW;
	RW = CW = W;

	for (int riadok = 0; riadok < mask.rows; riadok += W){
		for (int stlpec = 0; stlpec < mask.cols; stlpec += W){
			for (W_riadok = riadok; W_riadok < riadok + RW; W_riadok++){
				for (W_stlpec = stlpec; W_stlpec < stlpec + CW; W_stlpec++){
					if (mask.at<uchar>(W_riadok, W_stlpec) == 0)
						image.at<uchar>(W_riadok, W_stlpec) = 0;
				}
			}

			if (W_stlpec + W > mask.cols)
				CW = mask.cols % W;
			else
				CW = W;
		}
		CW = W;
		if (W_riadok + W > mask.rows)
			RW = mask.rows % W;
		else
			RW = W;
	}
}


void Fingerprint::conversion(){
	for (int riadok = 0; riadok < mask.rows; riadok++){
		for (int stlpec = 0; stlpec < mask.cols; stlpec++){
			if (mask.at<uchar>(riadok, stlpec) == 0)
				image.at<uchar>(riadok, stlpec) = 255;
		}
	}
}


void Fingerprint::Histogram(){
	Mat original;
	Mat histogram, histogramOrg;
	equalizeHist(image, original);

	int bins = 256;
	histogramOrg = Mat::zeros(1, bins, CV_32SC1);
	histogram = Mat::zeros(1, bins, CV_32SC1);
	for (int i = 0; i < image.rows; i++){
		for (int j = 0; j < image.cols; j++){
			uchar val = image.at<uchar>(i, j);
			histogram.at<int>(val) += 1;
			val = original.at<uchar>(i, j);
			histogramOrg.at<int>(val) += 1;
		}
	}

	int hmax, hmaxorg;
	hmax = hmaxorg = 0;

	for (int j = 0; j < bins - 1; j++){
		hmax = histogram.at<int>(j) > hmax ? histogram.at<int>(j) : hmax;
		hmaxorg = histogramOrg.at<int>(j) > hmaxorg ? histogramOrg.at<int>(j) : hmaxorg;
	}

	Mat canvas;
	Mat canvasOrg;
	canvasOrg = Mat::ones(bins, bins, CV_8UC3);
	canvas = Mat::ones(bins, bins, CV_8UC3);

	for (int j = 0, rows = canvas.rows; j < bins - 1; j++){
		line(
			canvas,
			Point(j, rows),
			Point(j, rows - (histogram.at<int>(j) * rows / hmax)),
			Scalar(255, 255, 255),
			1, 8, 0
			);
	}
	for (int j = 0, rows = canvasOrg.rows; j < bins - 1; j++){
		line(
			canvasOrg,
			Point(j, rows),
			Point(j, rows - (histogramOrg.at<int>(j) * rows / hmaxorg)),
			Scalar(255, 255, 255),
			1, 8, 0
			);
	}

	original.copyTo(image);
	cout << "Histogram odtlacku dokonceny\n";
	imwrite("Histogram.bmp", image);
}


void Fingerprint::WienerFilter2(int rows, int cols){
	Mat kernel;
	Mat temp1, temp2, temp3, temp4;

	kernel.create(rows, cols, CV_32F);
	kernel.setTo(Scalar(1.0 / (double)(rows * cols)));

	temp1.create(maskWiener.rows, maskWiener.cols, maskWiener.type());
	temp2.create(maskWiener.rows, maskWiener.cols, maskWiener.type());
	temp3.create(maskWiener.rows, maskWiener.cols, maskWiener.type());
	temp4.create(maskWiener.rows, maskWiener.cols, maskWiener.type());

	filter2D(maskWiener, temp1, -1, kernel, Point(cols / 2, rows / 2));
	multiply(maskWiener, maskWiener, temp2);
	filter2D(temp2, temp3, -1, kernel, Point(cols / 2, rows / 2));
	multiply(temp1, temp1, temp4);

	subtract(temp3, temp4, temp3);
	Scalar noise = mean(temp3);

	subtract(maskWiener, temp1, maskWiener);
	max(temp3, noise, temp2);
	add(temp3, Scalar(0), temp3);
	max(temp3, 0, temp3);

	divide(temp3, temp2, temp3);
	multiply(temp3, maskWiener, maskWiener);
	add(maskWiener, temp1, maskWiener);
}

void Fingerprint::WienerFilter(int rows, int cols){
	Mat kernel;
	Mat temp1, temp2, temp3, temp4;

	kernel.create(rows, cols, CV_32F);
	kernel.setTo(Scalar(1.0 / (double)(rows * cols)));

	temp1.create(mask.rows, mask.cols, mask.type());
	temp2.create(mask.rows, mask.cols, mask.type());
	temp3.create(mask.rows, mask.cols, mask.type());
	temp4.create(mask.rows, mask.cols, mask.type());

	filter2D(image, temp1, -1, kernel, Point(cols / 2, rows / 2));
	multiply(image, image, temp2);
	filter2D(temp2, temp3, -1, kernel, Point(cols / 2, rows / 2));
	multiply(temp1, temp1, temp4);

	subtract(temp3, temp4, temp3);
	Scalar noise = mean(temp3);

	subtract(image, temp1, image);
	max(temp3, noise, temp2);
	add(temp3, Scalar(0), temp3);
	max(temp3, 0, temp3);

	divide(temp3, temp2, temp3);
	multiply(temp3, image, image);
	add(image, temp1, image);

	cout << "Wienerov filter dokonceny\n";
	imwrite("Wiener.bmp", image);
}

void Fingerprint::OrientationMap(){
	Mat grad;
	block = 30;
	int temp_rows = image.rows % block;
	int temp_cols = image.cols % block;
	int tRows = image.rows - temp_rows;
	int tCols = image.cols - temp_cols;

	Mat crop(image, Rect(0, 0, tCols, tRows));
	Mat temp_image = crop.clone();
	int countBlock_x = temp_image.cols / block;
	int countBlock_y = temp_image.rows / block;

	Mat gradX, gradY;
	Mat absGrad_x, absGrad_y;
	Sobel(temp_image, gradX, CV_16S, 1, 0, 3, 1, 0, BORDER_DEFAULT);
	Sobel(temp_image, gradY, CV_16S, 0, 1, 3, 1, 0, BORDER_DEFAULT);

	gradX.convertTo(absGrad_x, CV_64F, 1. / 255);
	gradY.convertTo(absGrad_y, CV_64F, 1. / 255);
	Mat gxx = Mat::zeros(absGrad_x.rows, absGrad_x.cols, CV_64FC1);
	Mat gxy = Mat::zeros(absGrad_x.rows, absGrad_x.cols, CV_64FC1);
	Mat gyy = Mat::zeros(absGrad_x.rows, absGrad_x.cols, CV_64FC1);

	Mat sinus = Mat::zeros(absGrad_x.rows, absGrad_x.cols, CV_64FC1);
	Mat cosinus = Mat::zeros(absGrad_x.rows, absGrad_x.cols, CV_64FC1);
	theta = Mat::zeros(absGrad_x.rows, absGrad_x.cols, CV_64FC1);
	Mat denominator = Mat::zeros(absGrad_x.rows, absGrad_x.cols, CV_64FC1);
	for (int i = 0; i < absGrad_x.rows; i++){
		for (int j = 0; j < absGrad_x.cols; j++){
			gxx.at<double>(i, j) = pow(absGrad_x.at<double>(i, j), 2);
			gyy.at<double>(i, j) = pow(absGrad_y.at<double>(i, j), 2);
			gxy.at<double>(i, j) = absGrad_y.at<double>(i, j) * absGrad_x.at<double>(i, j);
		}
	}
	GaussianBlur(gxx, gxx, Size(31, 31), 0, 0, BORDER_DEFAULT);
	GaussianBlur(gyy, gyy, Size(31, 31), 0, 0, BORDER_DEFAULT);
	GaussianBlur(gxy, gxy, Size(31, 31), 0, 0, BORDER_DEFAULT);
	for (int i = 0; i < absGrad_x.rows; i++){
		for (int j = 0; j < absGrad_x.cols; j++){
			denominator.at<double>(i, j) = sqrt(pow(gxx.at<double>(i, j), 2) + pow(gxx.at<double>(i, j) - gyy.at<double>(i, j), 2)) + DBL_EPSILON;
			sinus.at<double>(i, j) = gxy.at<double>(i, j) / denominator.at<double>(i, j);
			cosinus.at<double>(i, j) = (gxx.at<double>(i, j) - gyy.at<double>(i, j)) / denominator.at<double>(i, j);
		}
	}
	GaussianBlur(sinus, sinus, Size(31, 31), 0, 0, BORDER_DEFAULT);
	GaussianBlur(cosinus, cosinus, Size(31, 31), 0, 0, BORDER_DEFAULT);

	for (int i = 0; i < absGrad_x.rows; i++){
		for (int j = 0; j < absGrad_x.cols; j++){
			theta.at<double>(i, j) = CV_PI + atan2(sinus.at<double>(i, j), cosinus.at<double>(i, j)) / 2;
		}
	}

	cout << "Vypocitana orientacia papilarnych linii\n";
}


void Fingerprint::GaborFilter(){
	Mat tempImage(image.rows, image.cols, CV_8U);

	double summary = 0.0;
	double average = 0.0;
	double sigma = 15.0;
	double lambda = 15.0;
	double psi = 0;
	double gamma = 1;

	int kernel_size = 31;
	int tempRows = 0;
	int tempCols = 0;

	if (!kernel_size % 2)
		kernel_size += 1;

	CvSize dimension = cvSize(kernel_size, kernel_size);
	Mat kernel;

	for (int i = (kernel_size - 1) / 2; i < image.rows - (kernel_size - 1); i++){
		for (int j = (kernel_size - 1) / 2; j < image.cols - (kernel_size - 1); j++){

			for (int k = 0; k < block; k++){
				for (int l = 0; l < block; l++){
					summary += theta.at<double>(i, j);
				}
			}

			average = summary / (kernel_size * kernel_size);
			summary = 0;

			kernel = getGaborKernel(dimension, sigma, average, lambda, gamma, psi, CV_64F);

			for (int k = i - (kernel_size - 1) / 2; k < i + kernel_size - (kernel_size - 1); k++){
				for (int l = j - (kernel_size - 1) / 2; l < j + kernel_size - (kernel_size - 1); l++){
					summary += (image.at<uchar>(k, l) / 255.0) * kernel.at<double>(tempRows, tempCols);
					tempCols++;
				}
				tempCols = 0;
				tempRows++;
			}
			tempRows = 0;
			tempImage.at<uchar>(i, j) = summary;
		}

	}
	for (int i = 0; i < maskWiener.rows; i++){
		for (int j = 0; j < mask.cols; j++){
			if (maskWiener.at<uchar>(i, j) == 0)
				tempImage.at<uchar>(i, j) = 255;
		}
	}

	image = tempImage;
	cout << "Gaborov filter dokonceny\n";
	imwrite("Gabor filter.bmp", image);

}


void Fingerprint::Binarization(){
	threshold(image, image, 100, 255, CV_THRESH_BINARY);
	cout << "Binarizacia dokoncena\n";
	imwrite("Binarizacia.bmp", image);
}



void Fingerprint::Thinning(){
	image.copyTo(tmpImage);
	ChangeColourWhite();
	image /= 255;
	cv::Mat prev = cv::Mat::zeros(image.size(), CV_8UC1);
	cv::Mat diff;

	do {
		GuoHall(image, 0);
		GuoHall(image, 1);
		cv::absdiff(image, prev, diff);
		image.copyTo(prev);
	} while (cv::countNonZero(diff) > 0);

	image *= 255;

	ChangeColourBlack();
	cout << "Stencenie odtlacku dokoncene\n";
	imwrite("Stencenie.bmp", image);
}



void Fingerprint::GuoHall(Mat image, int iteration){
	Mat marker = cv::Mat::zeros(image.size(), CV_8UC1);

	for (int i = 1; i < image.rows - 1; i++)
	{
		for (int j = 1; j < image.cols - 1; j++)
		{
			uchar p2 = image.at<uchar>(i - 1, j);
			uchar p3 = image.at<uchar>(i - 1, j + 1);
			uchar p4 = image.at<uchar>(i, j + 1);
			uchar p5 = image.at<uchar>(i + 1, j + 1);
			uchar p6 = image.at<uchar>(i + 1, j);
			uchar p7 = image.at<uchar>(i + 1, j - 1);
			uchar p8 = image.at<uchar>(i, j - 1);
			uchar p9 = image.at<uchar>(i - 1, j - 1);

			int C = (!p2 & (p3 | p4)) + (!p4 & (p5 | p6)) +
				(!p6 & (p7 | p8)) + (!p8 & (p9 | p2));
			int N1 = (p9 | p2) + (p3 | p4) + (p5 | p6) + (p7 | p8);
			int N2 = (p2 | p3) + (p4 | p5) + (p6 | p7) + (p8 | p9);
			int N = N1 < N2 ? N1 : N2;

			int m = iteration == 0 ? ((p6 | p7 | !p9) & p8) : ((p2 | p3 | !p5) & p4);

			if (C == 1 && (N >= 2 && N <= 3) & m == 0)
				marker.at<uchar>(i, j) = 1;
		}
	}

	image &= ~marker;
}


void Fingerprint::ChangeColourWhite(){
	for (int i = 0; i < image.rows; i++){
		for (int j = 0; j < image.cols; j++){
			if (image.at<uchar>(i, j) == 0){
				image.at<uchar>(i, j) = 255;
				continue;
			}
			if (image.at<uchar>(i, j) == 255)
				image.at<uchar>(i, j) = 0;
		}
	}
}

void Fingerprint::ChangeColourBlack(){
	for (int i = 0; i < image.rows; i++){
		for (int j = 0; j < image.cols; j++){
			if (image.at<uchar>(i, j) == 255){
				image.at<uchar>(i, j) = 0;
				continue;
			}
			if (image.at<uchar>(i, j) == 0)
				image.at<uchar>(i, j) = 255;
		}
	}
}

void Fingerprint::BaseMarkant(){
	image = imread("imageSkeleton.bmp");
	cvtColor(image, image, CV_RGB2GRAY);
	Mat draw;
	image.copyTo(draw);

	int count = 0;

	for (int i = 1; i < image.rows - 1; i++){
		for (int j = 1; j < image.cols - 1; j++){
			if (image.at<uchar>(i, j) == 0){
				int a = i;
				int b = j;
				for (int m = a - 1; m < a + 2; m++){
					for (int n = b - 1; n < b + 2; n++){
						if (image.at<uchar>(m, n) == 0){
							count++;
						}
					}
				}
				if (count == 2) {
					int radius = 10;
					bool true_end = true;
					for (int x = i - radius; x < i + radius; x++) {
						for (int y = j - radius; y < j + radius; y++) {
							if (maskWiener.at<unsigned char>(x, y) == 0) {
								true_end = false;
							}
						}
					}
					if (true_end)
						end.at<uchar>(i, j) = 1;
				}
				else if (count == 4)
					bifurcation.at<uchar>(i, j) = 1;
			}
			count = 0;
		}
	}
	cout << "Najdena vidlica a ukoncenie\n";


}

void Fingerprint::DeleteFalseMarkant(){
	bool t = false;
	int c = 0;
	Mat draw1;
	image.copyTo(draw1);
	int k = 0, l = 0, counter = 0;
	for (int i = 1; i < end.rows - 1; i++){
		for (int j = 1; j < end.cols - 1; j++){
			if (end.at<uchar>(i, j) == 1){
				for (int k = i - 5; k < i + 5; k++){
					for (int l = j - 5; l < j + 5; l++){
						if (maskWiener.at<uchar>(k, l) == 0){
							t = true;
							break;
						}
					}
					if (t == true)
						break;
				}
			}
			if (t == true){
				end.at<uchar>(i, j) = 0;
				t = false;
			}
		}
	}

	for (int i = 1; i < bifurcation.rows - 1; i++){
		for (int j = 1; j < bifurcation.cols - 1; j++){
			if (bifurcation.at<uchar>(i, j) == 1){
				for (int k = i - 5; k < i + 5; k++){
					for (int l = j - 5; l < j + 5; l++){
						if (maskWiener.at<uchar>(k, l) == 0){
							t = true;
							break;
						}
					}
					if (t == true)
						break;
				}
			}
			if (t == true){
				bifurcation.at<uchar>(i, j) = 0;
				t = false;
			}
		}
	}
	for (int i = 1; i < bifurcation.rows - 1; i++){
		for (int j = 1; j < bifurcation.cols - 1; j++){
			if (bifurcation.at<uchar>(i, j) == 1){
				for (int k = i - 15; k < i + 15; k++){
					for (int l = j - 15; l < j + 15; l++){
						if ((bifurcation.at<uchar>(k, l) == 1))
							if ((k == i && l == j))
								continue;
						bifurcation.at<uchar>(k, l) = 0;
					}
				}
			}
		}
	}
	for (int i = 1; i < bifurcation.rows - 1; i++){
		for (int j = 1; j < bifurcation.cols - 1; j++){
			if (bifurcation.at<uchar>(i, j) == 1){
				for (int k = i - 15; k < i + 15; k++){
					for (int l = j - 15; l < j + 15; l++){
						if ((end.at<uchar>(k, l) == 1)){
							if ((k == i && l == j))
								continue;
							end.at<uchar>(k, l) = 0;
							bifurcation.at<uchar>(i, j) = 0;
						}
					}
				}
			}
		}
	}
	cout << "Falosne markanty vidlica a ukoncenie odstranene\n";
}

void Fingerprint::Crossbar(){
	int f = 30;
	int x, y, m, n, u, v;
	bool t = false;

	for (int i = f; i < image.rows - f; i++){
		for (int j = f; j < image.cols - f; j++){

			if (end.at<uchar>(i, j) == 1){
				for (int k = i - f; k < i + f; k++){
					for (int l = j; l < j + f; l++){

						if (end.at<uchar>(k, l)){
							i <= k ? x = i : x = k;
							j <= l ? y = j : y = l;
							i <= k ? m = k : m = i;
							j <= l ? n = l : n = j;

							for (int a = x; a < m; a++){
								for (int b = y; b < n; b++){

									if (image.at<uchar>(a, b) == 0){

										if (((m - x) < 10) && ((n - y) < 10)){
											break;
											t = true;
										}

										u = ((m - x) / 2) + x;
										v = ((n - y) / 2) + y;

										crossbar.at<uchar>(u, v) = 1;
										end.at<uchar>(i, j) = 0;
										end.at<uchar>(k, l) = 0;

										t = true;
										break;

									}


									if (t == true)
										break;
								}
							}
							t = false;
						}
					}
				}
			}
		}
	}


	for (int i = 1; i < crossbar.rows - 1; i++){
		for (int j = 1; j < crossbar.cols - 1; j++){
			if (crossbar.at<uchar>(i, j) == 1){
				for (int k = i - 50; k < i + 50; k++){
					for (int l = j - 50; l < j + 50; l++){
						if ((crossbar.at<uchar>(k, l) == 1))
							if ((k == i && l == j))
								continue;
						crossbar.at<uchar>(k, l) = 0;
					}
				}
			}
		}
	}
	cout << "Najdene prekrizenie\n";
}


void Fingerprint::IsolatedPoint(){

	for (int i = 1; i < end.rows - 1; i++){
		for (int j = 1; j < end.cols - 1; j++){
			if (end.at<uchar>(i, j) == 1){
				for (int k = i - 5; k < i + 5; k++){
					for (int l = j - 5; l < j + 5; l++){
						if ((end.at<uchar>(k, l) == 1)){
							if ((k == i && l == j))
								continue;
							end.at<uchar>(k, l) = 0;
							end.at<uchar>(i, j) = 0;
							isolatedPoint.at<uchar>(k, l) = 1;
						}
					}
				}
			}
		}
	}

	cout << "Najdeny izolovany bod\n";
}

void Fingerprint::Trifurcation() {

	for (int i = 10; i < image.rows - 10; i++)
	{
		for (int j = 10; j < image.cols - 10; j++)
		{

			int B[16], hodnota = 0;
			B[0] = image.at<unsigned char>(i - 2, j - 2);
			B[1] = image.at<unsigned char>(i - 2, j - 1);
			B[2] = image.at<unsigned char>(i - 2, j);
			B[3] = image.at<unsigned char>(i - 2, j + 1);
			B[4] = image.at<unsigned char>(i - 2, j + 2);
			B[5] = image.at<unsigned char>(i - 1, j - 2);
			B[6] = image.at<unsigned char>(i - 1, j + 2);
			B[7] = image.at<unsigned char>(i, j - 2);
			B[8] = image.at<unsigned char>(i, j + 2);
			B[9] = image.at<unsigned char>(i + 1, j - 2);
			B[10] = image.at<unsigned char>(i + 1, j + 2);
			B[11] = image.at<unsigned char>(i + 2, j - 2);
			B[12] = image.at<unsigned char>(i + 2, j - 1);
			B[13] = image.at<unsigned char>(i + 2, j);
			B[14] = image.at<unsigned char>(i + 2, j + 1);
			B[15] = image.at<unsigned char>(i + 2, j + 2);

			int C[8], hodnotaC = 0;
			C[0] = image.at<unsigned char>(i - 1, j - 1);
			C[1] = image.at<unsigned char>(i - 1, j);
			C[2] = image.at<unsigned char>(i - 1, j + 1);
			C[3] = image.at<unsigned char>(i, j - 1);
			C[4] = image.at<unsigned char>(i, j + 1);
			C[5] = image.at<unsigned char>(i + 1, j - 1);
			C[6] = image.at<unsigned char>(i + 1, j);
			C[7] = image.at<unsigned char>(i + 1, j + 1);

			for (int k = 0; k < 16; k++)
			{
				if (B[k] < 128)
				{
					hodnota++;
				}
			}

			for (int k = 0; k < 8; k++) {
				if (C[k] < 128)
					hodnotaC++;
			}

			if (hodnota >= 4 && hodnotaC >= 4 &&/* maskWiener.at<unsigned char>(i, j) >= 200 &&*/ image.at<unsigned char>(i, j) < 128)
			{
				trifurcation.at<unsigned char>(i, j) = 1;
				int radius = 5;
				for (int x = i - radius; x < i + radius; x++) {
					for (int y = j - radius; y < j + radius; y++) {
						if (x == i && y == j)
							continue;
						trifurcation.at<unsigned char>(x, y) = 0;
						bifurcation.at<unsigned char>(x, y) = 0;
					}
				}
			}
		}
	}
	cout << "Najdena trifurkacia\n";

}


void Fingerprint::loadMaskWiener(char* path) {
	maskWiener = imread(path);
}
void Fingerprint::loadSkeleton(char* path) {
	image = imread(path, CV_8UC1);
}
